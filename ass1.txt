Script started on Fri 09 Aug 2013 01:46:38 PM EDT
hkim142@matrix:~/oop244/ass1> whoami
hkim142
hkim142@matrix:~/oop244/ass1> cl[K[Kcat ISBN.h ISBN.cpp
//hyungi kim 025 741 125//
//oop244//
//assignment1//
#include "ISBNPrefix.h"
int isValid(const char str[]);
int isRegistered(FILE* fp, const char str[], char area[], char publisher[],char title[]);
//hyungi kim 025 741 125//
//oop244//
//assignment1//
#include <iostream>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <math.h>
#include "ISBN.h"
using namespace std;
	int isValid(const char str[])
{
  int sum = 0, rc = 0;  
  int i = 0, m = 0, n = 0;
  if(str != NULL){
  for(i = 0; i < 10; i++)
  {
      m = str[i]-'0';  
      n = 10-i;
      sum += m * n;
  }
  if(str[9] == 'x'){
	  rc=0;
	  return rc;
  }
  if(sum % 11 == 0){ 
       rc = 1;}
  else{
	  rc=0;
  }
  }
//!NULL
  return rc;
	}
int isRegistered(FILE* fp, const char str[], char area[], char publisher[], char title[]){
	int rc=0,x=0,temp,tempz,r,i,y;
	rewind (fp);
	if(str == NULL){
		return rc;
	}
	if(isValid(str)==0){
		rc=0;
		return rc;
	}
	else{
		rc=1;
		for(i=0;i<5;i++){
			if(i == 5){
				rc=0;
				return rc;
			}
			area[i]=str[i];
			area[i+1]='\0';
			tempz=atoi(area);
			if(isRegistered(fp,tempz)==1){
				temp=minNoDigits(fp,tempz);
				for(y=0;y<8;y++){
					if(y==8){
						rc=0;
						return rc;
					}
					publisher[y]=str[temp+y];
					publisher[y+1]='\0';
					if(isRegistered(fp,tempz,publisher)==1){
						for(int z=0;z+temp+y<8;z++){
							title[z]=str[temp+y+z+1];
							title[z+1]='\0';
						}//title
						return rc;
					}//publisher ==1?
				}//publisher 2nd
			}//area ==1?
			
		}//area
	}
	return rc;
}//end

hkim142@matrix:~/oop244/ass1> cat ISBNPrefix.cpp ISBNPrefix.h
//hyungi kim 025 741 125//
//oop244//
//assignment1//
#include <stdio.h>
#include <string.h>
#include <iostream>
#include <stdlib.h>
#include <math.h>
#include"ISBNPrefix.h"
using namespace std;
FILE* open(const char filename[]){
    FILE* fp;

if(filename != NULL){
	fp=fopen(filename,"r");
	return fp;
}
else{
	fp=NULL;
	return fp;
}
}

int isRegistered(FILE* fp, int area){
	int a;
    int ps,pl;
    int ck=0;
    if(fp!=NULL){
		rewind(fp);
        while(ck == 0 && !feof(fp)){
     fscanf(fp, "%d%d%d", &a,&ps,&pl);  
     if(a == area){
       ck= 1;           }//check a==area
		}//while
	}//fp!=null
    return ck;
	}

int minNoDigits(FILE* fp, int area){
    int a, minno=0;
    char ps[10],pl[10];
    if(fp!=NULL){
        rewind(fp);
		while(!feof(fp) && minno==0){
			
            fscanf(fp,"%d%s%s",&a,ps,pl);

            if(area==a){
				if(a==0){
					minno=2;
					return minno;
				}
				minno = (int)(log10((float)a) + 1);
				return minno;
			}
		}
	}

return minno;
}

int isRegistered(FILE* fp, int area, const char publisher[])
{
   int rc = 0, i1 = 0, i2 = 0, i3 = 0, a = 0, i = 0;
   char pu[10], pl[10], p[10];             

   if(fp != NULL){ 
     rewind(fp);
  
   while(EOF != fscanf(fp, "%d%s%s", &a,pu,pl)) 
   {
      if(a == area)
      {                     
        i1 = atoi(pu);     
        i2 = atoi(pl);
        i3 = atoi(publisher);
        if(i3 <= i2 && i3 >= i1 && strlen(publisher) == strlen(pu)){
          rc = 1;
		}
	  }
   }//while

   for(i = 0; i < 2; i++){
     if(publisher[i]-'0' == 1 && publisher[i+1]-'0' == 0)
	 {
       rc = 1;
	 }
   }//for loop
   }//!NULL
   return rc;
}

int close(FILE* fp){
	int ck=0;
	if(fp!=NULL){
		fclose(fp);
		ck=1;
	}
	return ck;
}
//hyungi kim 025 741 125//
//oop244//
//assignment1//
FILE* open(const char filename[]);
int isRegistered(FILE*fp, int area);
int minNoDigits(FILE* fp, int area);
int isRegistered(FILE* fp, int area, const char publisher[]);
int close(FILE* fp);hkim142@matrix:~/oop244/ass1> a.out

Prefix Tests
============
Passed test    1 (open(NULL))
Passed test    2 (open(PREFIX))
Passed test    3 (area isRegistered(fp, -1))
Passed test    4 (area isRegistered(fp, 99955))
Passed test    5 (area isRegistered(fp, 0))
Passed test    6 (area-publisher isRegistered(fp, -1, "0"))
Passed test    7 (area-publisher isRegistered(fp, 99955, "0"))
Passed test    8 (area-publisher isRegistered(fp, 0, "10"))
Passed test    9 (area-publisher isRegistered(fp, 99955, "0"))
Passed test   10 (minNoDigits(fp, -1))
Passed test   11 (minNoDigits(fp, 0))
Passed test   12 (minNoDigits(fp, 92))

Prefix Tests passed!

ISBN Tests
==========
Passed test   13 (valid(NULL))
Passed test   14 (valid(""))
Passed test   15 (valid("9070002043"))
Passed test   16 (valid("9070002046"))

ISBN Tests passed!

ISBN/Prefix Tests
=================
Passed test   17 (isRegistered(fp, "9070002043", ...))
Passed test   18 (isRegistered(fp, "9995500000", ...))
total_isbn 1126
Passed test   19 (isRegistered(fp, ...) returned true for 0000000000)
Passed test  119 (isRegistered(fp, ...) returned true for 8070000007)
Passed test  219 (isRegistered(fp, ...) returned true for 9020000004)
Passed test  319 (isRegistered(fp, ...) returned true for 9559500007)
Passed test  419 (isRegistered(fp, ...) returned true for 9679989003)
Passed test  519 (isRegistered(fp, ...) returned true for 9781990007)
Passed test  619 (isRegistered(fp, ...) returned true for 9946000008)
Passed test  719 (isRegistered(fp, ...) returned true for 9961700007)
Passed test  819 (isRegistered(fp, ...) returned true for 9976999909)
Passed test  919 (isRegistered(fp, ...) returned true for 9990389004)
Passed test 1019 (isRegistered(fp, ...) returned true for 9992200006)
Passed test 1119 (isRegistered(fp, ...) returned true for 9993990000)
Passed test 1140 (isValid("014010867X") returned false)
Passed test 1141 (isValid("XXXXXXXXX0") returned false)
Passed test 1142 (isValid("061428726X") returned false)
Passed test 1143 (isValid("060611677X") returned false)
Passed test 1144 (isValid("081613752X") returned false)

ISBN/Prefix Tests passed!

Passed test 1145 (close(NULL))
Passed test 1146 (close(fp))

Your Bookstore modules have passed 1146 of 1146 tests

Congratulations!!!   Your Bookstore modules are ready for submission

hkim142@matrix:~/oop244/ass1> exit
exit

Script done on Fri 09 Aug 2013 01:47:45 PM EDT
